Email Validtion: e.g., username@example.com
	The emailPattern regular expression checks for the following:
	Starts with one or more alphanumeric characters, dots, underscores, percent signs, or plus signs.
	Followed by an at symbol (@).
	Then one or more alphanumeric characters, dots, or hyphens.
	Followed by a dot (.).
	Ends with two or more alphabetic characters (e.g., .com, .net).

	public bool IsValidEmail(string email)
	{
    		// Basic email format validation using regex
    		// You can enhance this with more specific rules if needed
    		const string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
    		return Regex.IsMatch(email, emailPattern);
	}


************************************************************************************
Password Validation:  e.g ,"P@ssw0rd";
	At least one uppercase letter ((?=.*[A-Z])).
	At least one lowercase letter ((?=.*[a-z])).
	At least one digit ((?=.*\d)).
	At least one special character (e.g., @, $, !, %, *, ?, &) ((?=.*[@$!%*?&])).
	Minimum length of 8 characters ({8,}).
	public bool IsValidPassword(string password)
	{	
    		const string passwordPattern = @"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$";
    		return Regex.IsMatch(password, passwordPattern);
	}
************************************************************************************
Username validation :e.g , "my-username123"
	^: Start of the string.
	(?!.*[-.]{2}): Negative lookahead to prevent consecutive hyphens or dots.
	[a-zA-Z0-9]: First character must be a letter or digit.
	[a-zA-Z0-9 .-]{0,58}: Allow letters, digits, spaces, dots, or hyphens (up to 58 characters).
	[a-zA-Z0-9]: Last character must be a letter or digit.
	$: End of the string.

	public bool IsValidUsername(string username)
	{
    		const string usernamePattern = @"^(?!.*[-.]{2})[a-zA-Z0-9][a-zA-Z0-9 .-]{0,58}[a-zA-Z0-9]$";
   		 return Regex.IsMatch(username, usernamePattern);
	}
************************************************************************************
Name validation : e.g, amin
	Basic Rules:
		First names and last names can consist of letters (both uppercase and lowercase).
		They can include spaces (for multi-word names) or hyphens (for hyphenated names).
	Additional Constraints:
		Ensure that the length of both the first name and last name is more than two characters.
		Avoid consecutive spaces or hyphens.
	public bool IsValidName(string name)
	{
   		 const string namePattern = @"^[a-zA-Z -]+$";
    		return Regex.IsMatch(name, namePattern) && name.Length > 2;
	}


***************************************



#region Register Validation
//public bool IsValidEmail(string email)
//{

//    const string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
//    bool isValid = Regex.IsMatch(email, emailPattern);
//    return isValid;
//}
//public bool IsValidPassword(string password)
//{

//    const string passwordPattern = @"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$";
//    return Regex.IsMatch(password, passwordPattern);
//}
//public bool IsValidUsername(string username)
//{

//    const string usernamePattern = @"^(?!.*[-.]{2})[a-zA-Z0-9][a-zA-Z0-9 .-]{0,58}[a-zA-Z0-9]$";
//    return Regex.IsMatch(username, usernamePattern);
//}
//public bool IsValidName(string name)
//{
//    const string namePattern = @"^[a-zA-Z -]+$";
//    return Regex.IsMatch(name, namePattern) && name.Length > 2;
//}


//public bool IsValidName(string name)
//{
//    // Check if the name contains only letters, spaces, and hyphens
//    foreach (char c in name)
//    {
//        if (!char.IsLetter(c) && c != ' ' && c != '-')
//            return false;
//    }

//    // Check if the name length is greater than 2
//    return name.Length > 2;
//}

//public bool IsValidUsername(string username)
//{
//    // Check if the username contains only alphanumeric characters, spaces, dots, and hyphens
//    foreach (char c in username)
//    {
//        if (!char.IsLetterOrDigit(c) && c != ' ' && c != '.' && c != '-')
//            return false;
//    }

//    // Check if the username length is within the specified range
//    return username.Length >= 3 && username.Length <= 60;
//}

//public bool IsValidPassword(string password)
//{
//    // Check if the password meets the specified criteria
//    bool hasUppercase = false;
//    bool hasLowercase = false;
//    bool hasDigit = false;
//    bool hasSpecialChar = false;

//    foreach (char c in password)
//    {
//        if (char.IsUpper(c))
//            hasUppercase = true;
//        else if (char.IsLower(c))
//            hasLowercase = true;
//        else if (char.IsDigit(c))
//            hasDigit = true;
//        else if ("@$!%*?&".Contains(c))
//            hasSpecialChar = true;
//    }

//    return password.Length >= 8 && hasUppercase && hasLowercase && hasDigit && hasSpecialChar;
//}

//public bool IsValidEmail(string email)
//{
//    // Check if the email contains "@" and "."
//    int atIndex = email.IndexOf('@');
//    int dotIndex = email.LastIndexOf('.');
//    return atIndex > 0 && dotIndex > atIndex && dotIndex < email.Length - 1;
//}



#endregion

